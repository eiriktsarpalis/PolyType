using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using PolyType.Roslyn;
using PolyType.SourceGenerator.Model;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;

namespace PolyType.SourceGenerator;

internal sealed partial class SourceFormatter(TypeShapeProviderModel provider)
{
    public static string[] ReservedIdentifiers { get; } = [ProviderSingletonProperty, GetShapeMethodName];

    private const string InstanceBindingFlagsConstMember = "__BindingFlags_Instance_All";
    private const string InitializeMethodName = "__Init_Singleton";
    private const string ProviderSingletonProperty = "Default";
    private const string GetShapeMethodName = "GetShape";

    public static void GenerateSourceFiles(SourceProductionContext context, TypeShapeProviderModel provider)
    {
        SourceFormatter formatter = new(provider);
        formatter.AddAllSourceFiles(context, provider);
    }

    private void AddAllSourceFiles(SourceProductionContext context, TypeShapeProviderModel provider)
    {
        if (provider is { ProvidedTypes.Count: 0, AnnotatedTypes.Length: 0 })
        {
            Debug.Assert(provider.Diagnostics.Count > 0);
            return;
        }

        context.CancellationToken.ThrowIfCancellationRequested();
        context.AddSource($"{provider.ProviderDeclaration.SourceFilenamePrefix}.g.cs", FormatShapeProviderMainFile(provider));

        foreach (TypeShapeModel type in provider.ProvidedTypes.Values)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            context.AddSource($"{provider.ProviderDeclaration.SourceFilenamePrefix}.{type.SourceIdentifier}.g.cs", FormatProvidedType(provider, type));
            switch (type)
            {
                // For polymorphic types additionally generate source for any necessary derived types that are not part of the type graph.

                case UnionShapeModel unionShapeModel:
                    context.AddSource(
                        $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{unionShapeModel.UnderlyingModel.SourceIdentifier}.g.cs",
                        FormatProvidedType(provider, unionShapeModel.UnderlyingModel));

                    break;

                case FSharpUnionShapeModel fSharpUnionShapeModel:
                    context.AddSource(
                        $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{fSharpUnionShapeModel.UnderlyingModel.SourceIdentifier}.g.cs",
                        FormatProvidedType(provider, fSharpUnionShapeModel.UnderlyingModel));

                    foreach (FSharpUnionCaseShapeModel unionCaseModel in fSharpUnionShapeModel.UnionCases)
                    {
                        context.AddSource(
                            $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{unionCaseModel.TypeModel.SourceIdentifier}.g.cs",
                            FormatProvidedType(provider, unionCaseModel.TypeModel));
                    }

                    break;
            }
        }

        foreach (TypeDeclarationModel typeDeclaration in provider.AnnotatedTypes)
        {
            if (typeDeclaration.IsWitnessTypeDeclaration)
            {
                context.AddSource($"{typeDeclaration.SourceFilenamePrefix}.g.cs", FormatWitnessTypeMainFile(typeDeclaration, provider));
            }

            foreach (TypeId typeToImplement in typeDeclaration.ShapeableOfTImplementations)
            {
                context.CancellationToken.ThrowIfCancellationRequested();
                string sourceFile = typeToImplement == typeDeclaration.Id
                    ? $"{typeDeclaration.SourceFilenamePrefix}.IShapeable.g.cs"
                    : $"{typeDeclaration.SourceFilenamePrefix}.IShapeable.{GetShapeModel(typeToImplement).SourceIdentifier}.g.cs";
                context.AddSource(sourceFile, FormatIShapeableOfTStub(typeDeclaration, typeToImplement, provider));
            }
        }
    }

    private static void StartFormatSourceFile(SourceWriter writer, TypeDeclarationModel typeDeclaration)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine();

#if DEBUG
        writer.WriteLine("""
            #nullable enable

            """);
#else
        writer.WriteLine("""
#nullable enable annotations
#nullable disable warnings

            """);
#endif

        if (typeDeclaration.Namespace is string @namespace)
        {
            writer.WriteLine($"namespace {@namespace}");
            writer.WriteLine('{');
            writer.Indentation++;
        }

        foreach (string containingType in typeDeclaration.ContainingTypes)
        {
            writer.WriteLine(containingType);
            writer.WriteLine('{');
            writer.Indentation++;
        }
    }

    private static void EndFormatSourceFile(SourceWriter writer)
    {
        while (writer.Indentation > 0)
        {
            writer.Indentation--;
            writer.WriteLine('}');
        }
    }

    private TypeShapeModel GetShapeModel(TypeId typeId) => provider.ProvidedTypes[typeId];

    private static string FormatBool(bool value) => value ? "true" : "false";
    private static string FormatNull(string? stringExpr) => stringExpr is null ? "null" : stringExpr;
    private static string FormatStringLiteral(string value) => SymbolDisplay.FormatLiteral(value, quote: true);

    private static string GetCollectionConstructionOptionsTypeName(TypeId keyType)
        => $"PolyType.Abstractions.CollectionConstructionOptions<{keyType}>";

    private static string FormatCollectionInitializer(ImmutableArray<ImmutableArray<ConstructionParameterType>> parameterLists, TypeId keyType, string ctorOrFactoryFormat, string? valuesExpression)
    {
        string? args = valuesExpression;
        string? comparer = null;
        ImmutableArray<ConstructionParameterType> selectedParameterList = default;
        foreach (ImmutableArray<ConstructionParameterType> parameterList in parameterLists)
        {
            // We only want to pass comparers to factories that also take some kind of values collection, unless the caller expects a mutable collection.
            // That means we must reject anything that isn't exactly two parameters long for immutable, or one parameter for mutable.
            if (parameterList.Length != (valuesExpression is null ? 1 : 2))
            {
                continue;
            }

            if (parameterList.Any(p => p is ConstructionParameterType.IEqualityComparerOfT))
            {
                comparer = "EqualityComparer";
                selectedParameterList = parameterList;
                break;
            }

            if (parameterList.Any(p => p == ConstructionParameterType.IComparerOfT))
            {
                comparer = "Comparer";
                selectedParameterList = parameterList;
                break;
            }
        }

        const string comparerLocalName = "comparer";
        if (comparer is not null)
        {
            args = selectedParameterList switch
            {
                [ConstructionParameterType.IEqualityComparerOfT or ConstructionParameterType.IComparerOfT, _] => $"{comparerLocalName}, {valuesExpression}",
                [_, ConstructionParameterType.IEqualityComparerOfT or ConstructionParameterType.IComparerOfT] => $"{valuesExpression}, {comparerLocalName}",
                [ConstructionParameterType.IEqualityComparerOfT or ConstructionParameterType.IComparerOfT] => comparerLocalName,
                _ => throw new NotSupportedException(), // should be unreachable.
            };
        }

        string optionsTypeName = GetCollectionConstructionOptionsTypeName(keyType);
        string preamble = $"static (in {optionsTypeName} options) => ";
        string valuesParameter = valuesExpression is null ? "()" : "values";
        return comparer is null
            ? $"{preamble}static {valuesParameter} => {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, valuesExpression)}" // Assume a constructor that accepts the values expression exists.
            : $"{preamble}{{ if (options.{comparer} is null) {{ return static {valuesParameter} => {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, valuesExpression)}; }} else {{ var {comparerLocalName} = options.{comparer}; return {valuesParameter} => {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, args)}; }} }}";
    }
}
