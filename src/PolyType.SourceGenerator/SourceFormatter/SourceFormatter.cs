using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using PolyType.Roslyn;
using PolyType.SourceGenerator.Model;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;
using System.Text;

namespace PolyType.SourceGenerator;

internal sealed partial class SourceFormatter(TypeShapeProviderModel provider)
{
    public static string[] ReservedIdentifiers { get; } = [ProviderSingletonProperty, GetShapeMethodName];

    private const string InstanceBindingFlagsConstMember = "__BindingFlags_Instance_All";
    private const string InitializeMethodName = "__Init_Singleton";
    private const string ProviderSingletonProperty = "Default";
    private const string GetShapeMethodName = "GetShape";

    public static void GenerateSourceFiles(SourceProductionContext context, TypeShapeProviderModel provider)
    {
        SourceFormatter formatter = new(provider);
        formatter.AddAllSourceFiles(context, provider);
    }

    private void AddAllSourceFiles(SourceProductionContext context, TypeShapeProviderModel provider)
    {
        if (provider is { ProvidedTypes.Count: 0, AnnotatedTypes.Length: 0 })
        {
            Debug.Assert(provider.Diagnostics.Count > 0);
            return;
        }

        context.CancellationToken.ThrowIfCancellationRequested();
        context.AddSource($"{provider.ProviderDeclaration.SourceFilenamePrefix}.g.cs", FormatShapeProviderMainFile(provider));

        foreach (TypeShapeModel type in provider.ProvidedTypes.Values)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            context.AddSource($"{provider.ProviderDeclaration.SourceFilenamePrefix}.{type.SourceIdentifier}.g.cs", FormatProvidedType(provider, type));
            switch (type)
            {
                // For polymorphic types additionally generate source for any necessary derived types that are not part of the type graph.

                case UnionShapeModel unionShapeModel:
                    context.AddSource(
                        $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{unionShapeModel.UnderlyingModel.SourceIdentifier}.g.cs",
                        FormatProvidedType(provider, unionShapeModel.UnderlyingModel));

                    break;

                case FSharpUnionShapeModel fSharpUnionShapeModel:
                    context.AddSource(
                        $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{fSharpUnionShapeModel.UnderlyingModel.SourceIdentifier}.g.cs",
                        FormatProvidedType(provider, fSharpUnionShapeModel.UnderlyingModel));

                    foreach (FSharpUnionCaseShapeModel unionCaseModel in fSharpUnionShapeModel.UnionCases)
                    {
                        context.AddSource(
                            $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{unionCaseModel.TypeModel.SourceIdentifier}.g.cs",
                            FormatProvidedType(provider, unionCaseModel.TypeModel));
                    }

                    break;
            }
        }

        foreach (TypeDeclarationModel typeDeclaration in provider.AnnotatedTypes)
        {
            if (typeDeclaration.IsWitnessTypeDeclaration)
            {
                context.AddSource($"{typeDeclaration.SourceFilenamePrefix}.g.cs", FormatWitnessTypeMainFile(typeDeclaration, provider));
            }

            foreach (TypeId typeToImplement in typeDeclaration.ShapeableOfTImplementations)
            {
                context.CancellationToken.ThrowIfCancellationRequested();
                string sourceFile = typeToImplement == typeDeclaration.Id
                    ? $"{typeDeclaration.SourceFilenamePrefix}.IShapeable.g.cs"
                    : $"{typeDeclaration.SourceFilenamePrefix}.IShapeable.{GetShapeModel(typeToImplement).SourceIdentifier}.g.cs";
                context.AddSource(sourceFile, FormatIShapeableOfTStub(typeDeclaration, typeToImplement, provider));
            }
        }
    }

    private static void StartFormatSourceFile(SourceWriter writer, TypeDeclarationModel typeDeclaration)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine();

#if DEBUG
        writer.WriteLine("""
            #nullable enable

            """);
#else
        writer.WriteLine("""
            #nullable enable annotations
            #nullable disable warnings

            """);
#endif

        writer.WriteLine("""
            #pragma warning disable CS0612, CS0618 // Use of obsolete APIs is natural when we're emitting delegates for obsolete properties.

            """);

        if (typeDeclaration.Namespace is string @namespace)
        {
            writer.WriteLine($"namespace {@namespace}");
            writer.WriteLine('{');
            writer.Indentation++;
        }

        foreach (string containingType in typeDeclaration.ContainingTypes)
        {
            writer.WriteLine(containingType);
            writer.WriteLine('{');
            writer.Indentation++;
        }
    }

    private static void EndFormatSourceFile(SourceWriter writer)
    {
        while (writer.Indentation > 0)
        {
            writer.Indentation--;
            writer.WriteLine('}');
        }
    }

    private TypeShapeModel GetShapeModel(TypeId typeId) => provider.ProvidedTypes[typeId];

    private static string FormatBool(bool value) => value ? "true" : "false";
    private static string FormatNull(string? stringExpr) => stringExpr is null ? "null" : stringExpr;
    private static string FormatStringLiteral(string value) => SymbolDisplay.FormatLiteral(value, quote: true);

    private static string FormatCollectionConstructionOptionsTypeName(TypeId keyType)
        => $"global::PolyType.Abstractions.CollectionConstructionOptions<{keyType}>";

    private static string FormatCollectionInitializer(
        ReadOnlyMemory<CollectionConstructorParameter> constructorParameters,
        ReadOnlyMemory<CollectionConstructorParameter> constructorWithCapacityParameters,
        bool hasConstructorWithoutComparer,
        TypeId keyType,
        string ctorOrFactoryFormat,
        (string Type, string Expression)? values)
    {
        string optionsTypeName = FormatCollectionConstructionOptionsTypeName(keyType);
        string valuesParam = values is null ? string.Empty : $"{values.Value.Type} values, ";
        string preamble = $"static ({valuesParam}in {optionsTypeName} options) => ";

        string? comparerType = FormatOptionsComparerPropertyName(constructorParameters.Span);
        string justValues = $"{string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, values?.Expression)}";
        if (comparerType is null)
        {
            if (!hasConstructorWithoutComparer)
            {
                throw new NotSupportedException("No constructor available without comparer.");
            }

            return constructorWithCapacityParameters.Length > 0
                ? $"{preamble}options.Capacity is null ? {justValues} : {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, FormatArgs(constructorWithCapacityParameters.Span))}"
                : $"{preamble}{justValues}";
        }
        else if (hasConstructorWithoutComparer)
        {
            string? argsWithComparer = constructorParameters.Span switch
            {
                [CollectionConstructorParameter.Comparer or CollectionConstructorParameter.EqualityComparer] when values is null => $"options.{comparerType}",
                [CollectionConstructorParameter.Comparer or CollectionConstructorParameter.EqualityComparer, CollectionConstructorParameter.Values] => $"options.{comparerType}, {values!.Value.Expression}",
                [CollectionConstructorParameter.Values, CollectionConstructorParameter.Comparer or CollectionConstructorParameter.EqualityComparer] => $"{values!.Value.Expression}, options.{comparerType}",
                _ => throw new NotSupportedException(),
            };

            return $"{preamble}options.{comparerType} is null ? {justValues} : {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, argsWithComparer)}";
        }
        else
        {
            return constructorWithCapacityParameters.Length > 0
                ? $"{preamble}options.Capacity is null ? {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, FormatArgs(constructorParameters.Span))} : {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, FormatArgs(constructorWithCapacityParameters.Span))}"
                : $"{preamble}{string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, FormatArgs(constructorParameters.Span))}";
        }

        string FormatArgs(ReadOnlySpan<CollectionConstructorParameter> parameters)
        {
            StringBuilder builder = new();
            for (int i = 0; i < parameters.Length; i++)
            {
                if (builder.Length > 0)
                {
                    builder.Append(", ");
                }

                builder.Append(parameters[i] switch
                {
                    CollectionConstructorParameter.Values => values!.Value.Expression,
                    CollectionConstructorParameter.Comparer or CollectionConstructorParameter.EqualityComparer => $"options.{comparerType}",
                    CollectionConstructorParameter.Capacity => "options.Capacity.Value",
                    _ => new NotSupportedException(),
                });
            }

            return builder.ToString();
        }
    }

    private static string? FormatOptionsComparerPropertyName(ReadOnlySpan<CollectionConstructorParameter> parameters)
    {
        for (int i = 0; i < parameters.Length; i++)
        {
            switch (parameters[i])
            {
                case CollectionConstructorParameter.Comparer: return "Comparer";
                case CollectionConstructorParameter.EqualityComparer: return "EqualityComparer";
            }
        }

        return null;
    }

    private static string FormatComparerOptions(ReadOnlySpan<CollectionConstructorParameter> parameters)
        => $"global::PolyType.Abstractions.CollectionComparerOptions.{FormatOptionsComparerPropertyName(parameters) ?? "None"}";

    private string FormatAssociatedTypeShapes(TypeShapeModel objectShapeModel)
    {
        AssociatedTypeId[] associatedTypeShapes = [..
            from associatedType in objectShapeModel.AssociatedTypes
            select associatedType.Key];
        if (associatedTypeShapes.Length == 0)
        {
            return "null";
        }

        StringBuilder builder = new();
        builder.Append("static associatedType => associatedType switch { ");
        foreach (AssociatedTypeId associatedType in associatedTypeShapes)
        {
            builder.Append($"\"{associatedType.Open}\" or \"{associatedType.Closed}\" => {provider.ProviderDeclaration.Id.FullyQualifiedName}.{ProviderSingletonProperty}.{GetShapeModel(associatedType.ClosedTypeId).SourceIdentifier}, ");
        }

        builder.Append("_ => null }");

        return builder.ToString();
    }
}
