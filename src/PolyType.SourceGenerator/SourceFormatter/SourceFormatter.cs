using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using PolyType.Roslyn;
using PolyType.SourceGenerator.Model;
using System.Diagnostics;
using System.Globalization;
using System.Text;

namespace PolyType.SourceGenerator;

internal sealed partial class SourceFormatter(TypeShapeProviderModel provider)
{
    public static string[] ReservedIdentifiers { get; } = [ProviderSingletonProperty, GetShapeMethodName];

    private const string InstanceBindingFlagsConstMember = "__BindingFlags_Instance_All";
    private const string AllBindingFlagsConstMember = "__BindingFlags_All";
    private const string InitializeMethodName = "__Init_Singleton";
    private const string ProviderSingletonProperty = "Default";
    private const string GetShapeMethodName = "GetTypeShape";

    public static void GenerateSourceFiles(SourceProductionContext context, TypeShapeProviderModel provider)
    {
        SourceFormatter formatter = new(provider);
        formatter.AddAllSourceFiles(context, provider);
    }

    private void AddAllSourceFiles(SourceProductionContext context, TypeShapeProviderModel provider)
    {
        if (provider is { ProvidedTypes.Count: 0, AnnotatedTypes.Length: 0 })
        {
            Debug.Assert(provider.Diagnostics.Count > 0);
            return;
        }

        context.CancellationToken.ThrowIfCancellationRequested();
        context.AddSource($"{provider.ProviderDeclaration.SourceFilenamePrefix}.g.cs", FormatTypeShapeProviderMainFile(provider));

        foreach (TypeShapeModel type in provider.ProvidedTypes.Values)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            context.AddSource($"{provider.ProviderDeclaration.SourceFilenamePrefix}.{type.SourceIdentifier}.g.cs", FormatProvidedType(provider, type));
            switch (type)
            {
                // For polymorphic types additionally generate source for any necessary derived types that are not part of the type graph.

                case UnionShapeModel unionShapeModel:
                    context.AddSource(
                        $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{unionShapeModel.UnderlyingModel.SourceIdentifier}.g.cs",
                        FormatProvidedType(provider, unionShapeModel.UnderlyingModel));

                    break;

                case FSharpUnionShapeModel fSharpUnionShapeModel:
                    context.AddSource(
                        $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{fSharpUnionShapeModel.UnderlyingModel.SourceIdentifier}.g.cs",
                        FormatProvidedType(provider, fSharpUnionShapeModel.UnderlyingModel));

                    foreach (FSharpUnionCaseShapeModel unionCaseModel in fSharpUnionShapeModel.UnionCases)
                    {
                        context.AddSource(
                            $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{unionCaseModel.TypeModel.SourceIdentifier}.g.cs",
                            FormatProvidedType(provider, unionCaseModel.TypeModel));
                    }

                    break;
            }
        }

        foreach (TypeDeclarationModel typeDeclaration in provider.AnnotatedTypes)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            context.AddSource($"{typeDeclaration.SourceFilenamePrefix}.g.cs", FormatGeneratedTypeMainFile(typeDeclaration));
        }
    }

    private static void StartFormatSourceFile(SourceWriter writer, TypeDeclarationModel typeDeclaration)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine();

#if DEBUG
        writer.WriteLine("""
            #nullable enable
            #pragma warning disable CS0612, CS0618 // Use of obsolete APIs is natural when we're emitting delegates for obsolete properties.
            #pragma warning disable CS0436 // Use of local types when imported types by the same name exist.

            """);
#else
        writer.WriteLine("""
            #nullable enable annotations
            #nullable disable warnings
            #pragma warning disable

            """);
#endif

        if (typeDeclaration.Namespace is string @namespace)
        {
            writer.WriteLine($"namespace {@namespace}");
            writer.WriteLine('{');
            writer.Indentation++;
        }

        foreach (string containingType in typeDeclaration.ContainingTypes)
        {
            writer.WriteLine(containingType);
            writer.WriteLine('{');
            writer.Indentation++;
        }
    }

    private static void EndFormatSourceFile(SourceWriter writer)
    {
        while (writer.Indentation > 0)
        {
            writer.Indentation--;
            writer.WriteLine('}');
        }
    }

    private TypeShapeModel GetShapeModel(TypeId typeId) => provider.ProvidedTypes[typeId];

    private static string FormatBool(bool value) => value ? "true" : "false";
    private static string FormatNull(string? stringExpr) => stringExpr is null ? "null" : stringExpr;
    private static string FormatStringLiteral(string value) => SymbolDisplay.FormatLiteral(value, quote: true);

    private static string FormatCollectionConstructionOptionsTypeName(TypeId keyType)
        => $"global::PolyType.Abstractions.CollectionConstructionOptions<{keyType}>";

    private static string FormatCollectionInitializer(
        ImmutableEquatableArray<CollectionConstructorParameter> constructorParameters,
        TypeId keyType,
        TypeId? valueType,
        string ctorOrFactoryFormat,
        string? elementType,
        bool elementContainsNullableAnnotations)
    {
        const string Values = "values";
        string optionsTypeName = FormatCollectionConstructionOptionsTypeName(keyType);
        string valuesParam = elementType is null ? string.Empty : $"global::System.ReadOnlySpan<{elementType}> {Values}, ";
        string suppressSuffix = elementContainsNullableAnnotations ? "!" : "";
        return $"static ({valuesParam}in {optionsTypeName} options) => {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, FormatArgs(constructorParameters))}";

        string FormatArgs(ImmutableEquatableArray<CollectionConstructorParameter> parameters)
        {
            if (parameters.Length == 0)
            {
                return "";
            }

            StringBuilder builder = new();
            for (int i = 0; i < parameters.Length; i++)
            {
                builder.Append(parameters[i] switch
                {
                    CollectionConstructorParameter.Span => Values + suppressSuffix,
                    CollectionConstructorParameter.List => $"global::PolyType.SourceGenModel.CollectionHelpers.CreateList<{GetElementTypeFQN()}>({Values}){suppressSuffix}",
                    CollectionConstructorParameter.HashSet => $"global::PolyType.SourceGenModel.CollectionHelpers.CreateHashSet<{GetElementTypeFQN()}>({Values}, options.EqualityComparer){suppressSuffix}",
                    CollectionConstructorParameter.Dictionary => $"global::PolyType.SourceGenModel.CollectionHelpers.CreateDictionary<{keyType.FullyQualifiedName}, {valueType!.Value.FullyQualifiedName}>({Values}, options.EqualityComparer){suppressSuffix}",
                    CollectionConstructorParameter.TupleEnumerable => $"global::PolyType.SourceGenModel.CollectionHelpers.CreateTupleArray<{keyType.FullyQualifiedName}, {valueType!.Value.FullyQualifiedName}>({Values}){suppressSuffix}",
                    CollectionConstructorParameter.EqualityComparer => $"options.EqualityComparer ?? global::System.Collections.Generic.EqualityComparer<{keyType.FullyQualifiedName}>.Default",
                    CollectionConstructorParameter.EqualityComparerOptional => "options.EqualityComparer!",
                    CollectionConstructorParameter.Comparer => $"options.Comparer ?? global::System.Collections.Generic.Comparer<{keyType.FullyQualifiedName}>.Default",
                    CollectionConstructorParameter.ComparerOptional => "options.Comparer!",
                    CollectionConstructorParameter.Capacity => "options.Capacity ?? 0",
                    _ => throw new NotSupportedException(parameters[i].ToString()),
                });

                builder.Append(", ");

                string GetElementTypeFQN() => valueType is { } vt
                    ? $"global::System.Collections.Generic.KeyValuePair<{keyType.FullyQualifiedName}, {vt.FullyQualifiedName}>" // Dictionary, so the element type is a KeyValuePair
                    : keyType.FullyQualifiedName; // Not a dictionary, the key type is the element type
            }

            builder.Length -= 2; // Remove the last ", "
            return builder.ToString();
        }
    }

    private static string? FormatOptionsComparerPropertyName(ImmutableEquatableArray<CollectionConstructorParameter> parameters)
    {
        for (int i = 0; i < parameters.Length; i++)
        {
            switch (parameters[i])
            {
                case CollectionConstructorParameter.Comparer:
                case CollectionConstructorParameter.ComparerOptional:
                    return "Comparer";
                case CollectionConstructorParameter.EqualityComparer:
                case CollectionConstructorParameter.EqualityComparerOptional:
                // Any comparers will be passed to intermediate hashsets/dicts
                // created by the collection construction delegate.
                case CollectionConstructorParameter.HashSet:
                case CollectionConstructorParameter.Dictionary:
                    return "EqualityComparer";
            }
        }

        return null;
    }

    private static string FormatComparerOptions(ImmutableEquatableArray<CollectionConstructorParameter> parameters)
        => $"global::PolyType.Abstractions.CollectionComparerOptions.{FormatOptionsComparerPropertyName(parameters) ?? "None"}";

    private static string? GetAssociatedTypesFactoryName(TypeShapeModel typeShapeModel)
    {
        return typeShapeModel.AssociatedTypes.Count > 0 ? $"__GetAssociatedTypes_{typeShapeModel.SourceIdentifier}" : null;
    }

    private static string FormatAttributeProviderFactory(ImmutableEquatableArray<AttributeDataModel> attributes)
    {
        if (attributes.Length == 0)
        {
            return "null";
        }

        StringBuilder sb = new();
        sb.Append("static () => new global::PolyType.SourceGenModel.SourceGenAttributeProvider(static () => new global::System.Attribute[] { ");
        
        for (int i = 0; i < attributes.Length; i++)
        {
            if (i > 0)
            {
                sb.Append(", ");
            }

            AttributeDataModel attr = attributes[i];
            sb.Append($"new {attr.AttributeType.FullyQualifiedName}(");
            
            // Add constructor arguments
            for (int j = 0; j < attr.ConstructorArguments.Length; j++)
            {
                if (j > 0)
                {
                    sb.Append(", ");
                }
                sb.Append(attr.ConstructorArguments[j]);
            }
            
            sb.Append(')');
            
            // Add named arguments (property/field initializers)
            if (attr.NamedArguments.Length > 0)
            {
                sb.Append(" { ");
                for (int j = 0; j < attr.NamedArguments.Length; j++)
                {
                    if (j > 0)
                    {
                        sb.Append(", ");
                    }
                    var (name, value) = attr.NamedArguments[j];
                    sb.Append($"{name} = {value}");
                }
                sb.Append(" }");
            }
        }
        
        sb.Append(" })");
        return sb.ToString();
    }

    private void FormatAssociatedTypesFactory(SourceWriter writer, TypeShapeModel objectShapeModel, string factoryName)
    {
        Debug.Assert(objectShapeModel.AssociatedTypes.Count > 0);

        writer.WriteLine($$"""
            private global::PolyType.ITypeShape? {{factoryName}}(global::System.Type associatedType)
            {
                switch (associatedType?.ToString())
                {
            """);

        writer.Indentation += 2;
        foreach (AssociatedTypeId associatedType in objectShapeModel.AssociatedTypes)
        {
            if (associatedType.OpenTypeInfo is { } openTypeInfo)
            {
                writer.WriteLine($$"""
                    case {{FormatStringLiteral(openTypeInfo.ReflectionName)}}:
                    case {{FormatStringLiteral(associatedType.ClosedTypeReflectionName)}}:
                    {
                        return GetMatchingAssociatedShape(associatedType);

                        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
                        global::PolyType.ITypeShape? GetMatchingAssociatedShape(global::System.Type type) =>
                            type == typeof({{associatedType.ClosedTypeId.FullyQualifiedName}}) || type == typeof({{openTypeInfo.TypeId}}) ? {{GetShapeModel(associatedType.ClosedTypeId).SourceIdentifier}} : null;
                    }
                    """);
            }
            else
            {
                writer.WriteLine($$"""
                case {{FormatStringLiteral(associatedType.ClosedTypeReflectionName)}}:
                {
                    return GetMatchingAssociatedShape(associatedType);

                    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
                    global::PolyType.ITypeShape? GetMatchingAssociatedShape(global::System.Type type) =>
                        type == typeof({{associatedType.ClosedTypeId.FullyQualifiedName}}) ? {{GetShapeModel(associatedType.ClosedTypeId).SourceIdentifier}} : null;
                }
                """);
            }
        }

        writer.Indentation -= 2;
        writer.WriteLine("""
                    default:
                        return null;
                }
            }
            """);
    }
}
