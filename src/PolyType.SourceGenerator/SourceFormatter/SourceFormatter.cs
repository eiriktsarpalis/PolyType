using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using PolyType.Roslyn;
using PolyType.SourceGenerator.Model;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;
using System.Text;

namespace PolyType.SourceGenerator;

internal sealed partial class SourceFormatter(TypeShapeProviderModel provider)
{
    public static string[] ReservedIdentifiers { get; } = [ProviderSingletonProperty, GetShapeMethodName];

    private const string InstanceBindingFlagsConstMember = "__BindingFlags_Instance_All";
    private const string InitializeMethodName = "__Init_Singleton";
    private const string ProviderSingletonProperty = "Default";
    private const string GetShapeMethodName = "GetShape";

    public static void GenerateSourceFiles(SourceProductionContext context, TypeShapeProviderModel provider)
    {
        SourceFormatter formatter = new(provider);
        formatter.AddAllSourceFiles(context, provider);
    }

    private void AddAllSourceFiles(SourceProductionContext context, TypeShapeProviderModel provider)
    {
        if (provider is { ProvidedTypes.Count: 0, AnnotatedTypes.Length: 0 })
        {
            Debug.Assert(provider.Diagnostics.Count > 0);
            return;
        }

        context.CancellationToken.ThrowIfCancellationRequested();
        context.AddSource($"{provider.ProviderDeclaration.SourceFilenamePrefix}.g.cs", FormatShapeProviderMainFile(provider));

        foreach (TypeShapeModel type in provider.ProvidedTypes.Values)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            context.AddSource($"{provider.ProviderDeclaration.SourceFilenamePrefix}.{type.SourceIdentifier}.g.cs", FormatProvidedType(provider, type));
            switch (type)
            {
                // For polymorphic types additionally generate source for any necessary derived types that are not part of the type graph.

                case UnionShapeModel unionShapeModel:
                    context.AddSource(
                        $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{unionShapeModel.UnderlyingModel.SourceIdentifier}.g.cs",
                        FormatProvidedType(provider, unionShapeModel.UnderlyingModel));

                    break;

                case FSharpUnionShapeModel fSharpUnionShapeModel:
                    context.AddSource(
                        $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{fSharpUnionShapeModel.UnderlyingModel.SourceIdentifier}.g.cs",
                        FormatProvidedType(provider, fSharpUnionShapeModel.UnderlyingModel));

                    foreach (FSharpUnionCaseShapeModel unionCaseModel in fSharpUnionShapeModel.UnionCases)
                    {
                        context.AddSource(
                            $"{provider.ProviderDeclaration.SourceFilenamePrefix}.{unionCaseModel.TypeModel.SourceIdentifier}.g.cs",
                            FormatProvidedType(provider, unionCaseModel.TypeModel));
                    }

                    break;
            }
        }

        foreach (TypeDeclarationModel typeDeclaration in provider.AnnotatedTypes)
        {
            if (typeDeclaration.IsWitnessTypeDeclaration)
            {
                context.AddSource($"{typeDeclaration.SourceFilenamePrefix}.g.cs", FormatWitnessTypeMainFile(typeDeclaration, provider));
            }

            foreach (TypeId typeToImplement in typeDeclaration.ShapeableOfTImplementations)
            {
                context.CancellationToken.ThrowIfCancellationRequested();
                string sourceFile = typeToImplement == typeDeclaration.Id
                    ? $"{typeDeclaration.SourceFilenamePrefix}.IShapeable.g.cs"
                    : $"{typeDeclaration.SourceFilenamePrefix}.IShapeable.{GetShapeModel(typeToImplement).SourceIdentifier}.g.cs";
                context.AddSource(sourceFile, FormatIShapeableOfTStub(typeDeclaration, typeToImplement, provider));
            }
        }
    }

    private static void StartFormatSourceFile(SourceWriter writer, TypeDeclarationModel typeDeclaration)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine();

#if DEBUG
        writer.WriteLine("""
            #nullable enable

            """);
#else
        writer.WriteLine("""
            #nullable enable annotations
            #nullable disable warnings

            """);
#endif

        if (typeDeclaration.Namespace is string @namespace)
        {
            writer.WriteLine($"namespace {@namespace}");
            writer.WriteLine('{');
            writer.Indentation++;
        }

        foreach (string containingType in typeDeclaration.ContainingTypes)
        {
            writer.WriteLine(containingType);
            writer.WriteLine('{');
            writer.Indentation++;
        }
    }

    private static void EndFormatSourceFile(SourceWriter writer)
    {
        while (writer.Indentation > 0)
        {
            writer.Indentation--;
            writer.WriteLine('}');
        }
    }

    private TypeShapeModel GetShapeModel(TypeId typeId) => provider.ProvidedTypes[typeId];

    private static string FormatBool(bool value) => value ? "true" : "false";
    private static string FormatNull(string? stringExpr) => stringExpr is null ? "null" : stringExpr;
    private static string FormatStringLiteral(string value) => SymbolDisplay.FormatLiteral(value, quote: true);

    private static string GetCollectionConstructionOptionsTypeName(TypeId keyType)
        => $"PolyType.Abstractions.CollectionConstructionOptions<{keyType}>";

    private static string FormatCollectionInitializer(ConstructionWithComparer constructorComparer, TypeId keyType, string ctorOrFactoryFormat, string? valuesExpression)
    {
        string? comparer = constructorComparer switch
        {
            ConstructionWithComparer.None => null,
            ConstructionWithComparer.Comparer or ConstructionWithComparer.ComparerValues or ConstructionWithComparer.ValuesComparer => "Comparer",
            ConstructionWithComparer.EqualityComparer or ConstructionWithComparer.EqualityComparerValues or ConstructionWithComparer.ValuesEqualityComparer => "EqualityComparer",
            _ => throw new NotSupportedException(),
        };
        const string comparerLocalName = "comparer";
        string? args = constructorComparer switch
        {
            ConstructionWithComparer.None => valuesExpression,
            ConstructionWithComparer.Comparer or ConstructionWithComparer.EqualityComparer when valuesExpression is null => comparerLocalName,
            ConstructionWithComparer.ComparerValues or ConstructionWithComparer.EqualityComparerValues => $"{comparerLocalName}, {valuesExpression}",
            ConstructionWithComparer.ValuesComparer or ConstructionWithComparer.ValuesEqualityComparer => $"{valuesExpression}, {comparerLocalName}",
            _ => throw new NotSupportedException(),
        };

        string optionsTypeName = GetCollectionConstructionOptionsTypeName(keyType);
        string preamble = $"static options => ";
        string valuesParameter = valuesExpression is null ? "()" : "values";
        return comparer is null
            ? $"{preamble}static {valuesParameter} => {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, valuesExpression)}" // Assume a constructor that accepts the values expression exists.
            : $"{preamble}{{ if (options?.{comparer} is null) {{ return static {valuesParameter} => {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, valuesExpression)}; }} else {{ var {comparerLocalName} = options.{comparer}; return {valuesParameter} => {string.Format(CultureInfo.InvariantCulture, ctorOrFactoryFormat, args)}; }} }}";
    }

    private static string FormatComparerOptions(ConstructionWithComparer comparer)
    {
        string kind = comparer switch
        {
            ConstructionWithComparer.None => "None",
            ConstructionWithComparer.Comparer or ConstructionWithComparer.ComparerValues or ConstructionWithComparer.ValuesComparer => "Comparer",
            ConstructionWithComparer.EqualityComparer or ConstructionWithComparer.EqualityComparerValues or ConstructionWithComparer.ValuesEqualityComparer => "EqualityComparer",
            _ => throw new NotSupportedException(),
        };

        return $"global::PolyType.Abstractions.CollectionComparerOptions.{kind}";
    }

    private string FormatAssociatedTypeShapes(TypeShapeModel objectShapeModel)
    {
        AssociatedTypeId[] associatedTypeShapes = [..
            from associatedType in objectShapeModel.AssociatedTypes
            select associatedType.Key];
        if (associatedTypeShapes.Length == 0)
        {
            return "null";
        }

        StringBuilder builder = new();
        builder.Append("static associatedType => associatedType switch { ");
        foreach (AssociatedTypeId associatedType in associatedTypeShapes)
        {
            builder.Append($"\"{associatedType.Open}\" or \"{associatedType.Closed}\" => {provider.ProviderDeclaration.Id.FullyQualifiedName}.{ProviderSingletonProperty}.{GetShapeModel(associatedType.ClosedTypeId).SourceIdentifier}, ");
        }

        builder.Append("_ => null }");

        return builder.ToString();
    }
}
